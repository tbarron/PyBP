Build Layers of Code, Like a Cake
------------------------------------------------------------

Functions at a lower level of your layer cake should never call functions
in higher levels.

**Why**:

* Upward calls (functions in a lower level calling functions in a higher
  level) are likely to create unresolvable cycles of dependency among the
  components of your project.

**How**:

* Define and document the layers of software your project requires and
  ensure that functions never call above their own layer.

In general, to avoid dependency cycles, make sure all the calls a function
issues are to functions in the same layer or lower.

An implication of this is that nitty gritty work should be done in lower
layers of the cake with higher layers recruiting functions in lower
layers to accomplish more comprehensive goals.

This dovetails with the idea described in `Bricks, Not Monoliths
<s-funcmeth.html#make-bricks-not-monoliths>`_. Define your smaller
brick-like functions in the lower levels and use functions in higher levels
to combine these bricks into larger structures.

For example, if we are parsing text, we might have a function called
read_file() in the lowest level that reads bytes from a file. In the next
layer up is function word_stream() that consumes the bytes returned by
read_file() and assembles them into words. Yet another layer up is code
that consumes the words produced by word_stream() to count the frequency of
specific words or to analyze grammatical constructions.

|
|
|
