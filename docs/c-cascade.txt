Use Cascading Methods
------------------------------------------------------------

If an object method has nothing better to return, make it return
``self``.

**Why**:

* Doing this enables functions to daisy chain. That is, when methods return
  ``self``, they can be chained together in the same way str methods can
  be. For example,
  ::

    >>> " foo bar   ".strip().upper().split()
    ['FOO', 'BAR']

* Using this tactic enables a particular form of composition from smaller
  operations as recommended in `Bricks, Not Monoliths
  <s-funcmeth.html#make-bricks-not-monoliths>`_.

* This tactic also both helps satisfy the `Always Return Something
  <s-funcmeth.html#always-return-something-you-do-anyway>`_ recommendation
  and benefits from its implementation.

**How**:

* Just ``return self`` at the end of each method with nothing better to
  return.

**Example**:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

adapted from `Python Best Practice Patterns by Vladimir Keleshev
<http://stevenloria.com/python-best-practice-patterns-by-vladimir-keleshev-notes>`_

*Instead of this*::

    class Reactor:
        def release_water(self):
            ...
            return                          <1>
        def shutdown(self):
            ...                             <1>
        def alarm(self):
            ...
            return                          <1>

    foo = Reactor()
    foo.release_water()                     <2>
    foo.shutdown()
    foo.alarm()

 <1> Methods return None explicitly or implicitly (if return is
     omitted).
 <2> Each method has to be called through the object.

*Do this*::

    class Reactor:
        def release_water(self):
            ...
            return self                     <3>
        def shutdown(self):
            ...
            return self                     <3>
        def alarm(self):
            ...
            return self                     <3>

    foo = Reactor
    foo.release_water().shutdown().alarm()  <4>

 <3> Methods return self.
 <4> Calls can be daisy chained.

|
|
|
