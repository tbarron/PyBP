Make Bricks, Not Monoliths
------------------------------------------------------------

Design functions and methods as tiny bricks rather than huge monoliths.
Encapsulate non-obvious code in well-named functions so the reader knows at
a glance what each function does.

**Why**:

* Small chunks of well-encapsulated code can be put together in lots of
  different ways to build up more significant functionality. However, it's
  difficult to reuse 500-line special-purpose routines effectively.

* Small functions are easier to understand and test. Well-named short
  routines whose purpose and function are obvious from the name and code
  often communicate more effectively than the same code embedded in a
  larger function, even if the larger function is well-commented.

**How**:

* Limit each function/method to a single task, all at the same
  level of abstraction.

Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

adapted from `Python Best Practice Patterns by Vladimir Keleshev
<http://stevenloria.com/python-best-practice-patterns-by-vladimir-keleshev-notes>`_

**Not so good**::

    def do_everything():
        ... 1000 lines in a single function ...


**Not very obvious**::

    ...
    if self.flags & 0b1000:  # Am I visible?
        ...


**Better**::

    ...
    def is_visible(self):
        return self.flags & 0b1000
    ...
    ...
    if self.is_visible():
        ...

|
|
|
