Object Completeness
------------------------------------------------------------

When its constructor returns, an object should be complete and well-formed.

**Why**:

* If two operations are not tied together by the code but I have to
  remember to follow up A (eg., constructing an object) with B (eg.,
  filling in the objects member variables with valid values), sooner or
  later I'm going to forget B. (A similar principle is called out in `Use
  Context Managers <s-resource.html#use-context-managers>`_)

**How**:

* Write a test for each object constructor that verifies that all
  attributes of new objects have a valid, meaningful value.

* If you forget to provide a valid value for an object attribute, the
  failing test will serve as a reminder.

Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

adapted from `Python Best Practice Patterns by Vladimir Keleshev
<http://stevenloria.com/python-best-practice-patterns-by-vladimir-keleshev-notes>`_

**Instead of this**::

    class Human(object):
        def __init__(self):
            self.name = ""
            self.age = 0
            self.married = None

    ...

    import Human
    p = Human()                                          <1>
    p.name = "George"
    p.age = 75
    p.married = True

 <1> The constructor has finished at this point, but the person has no
 name, age, or marital status.

**Do this**::

    class Human(object):
        def __init__(self, name, age, married):
            self.name = name
            self.age = age
            self.married = married

    ...

    import Human
    p = Human(name="George", age=75, married=True) <2>

 <2> When the constructor completes, all of the members of p are set.

Also, note that in the second example, attempting to instantiate a person
without a name, age, or marital status will fail because the constructor
requires all three arguments.

|
|
|
