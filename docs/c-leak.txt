Leak Prevention
------------------------------------------------------------

Use ``with`` to represent pairs of action that should be taken together
so that you avoid resource leakage over time.
Examples are open/close, lock/unlock, cd to another directory/return
to the starting directory, etc.

Recommended in `Python Best Practice Patterns by Vladimir Keleshev
<http://stevenloria.com/python-best-practice-patterns-by-vladimir-keleshev-notes>`_.

**Why**:

* It's easy to forget the downstream action, especially if
  there's enough code using the resource to distract you.

**How**:

* Use Python's ``with`` statement when accessing the resource so
  that disposition of the resource is automatic.

Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Instead of this**::

    f = open(filename, 'w')
    f.write(data)
    ...                         <1>
    f.close()                   <2>

 <1> Imagine 100 lines of output here.
 <2> It would be easy to forget this close.

**Do this**::

    with open(filename, 'w') as f:
        f.write(data)           <3>

 <3> The close is automatic. You do not have to remember to code it.

|
|
|
