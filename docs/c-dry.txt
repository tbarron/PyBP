Don't Repeat Yourself
------------------------------------------------------------

 - "Every piece of knowledge must have a single, unambiguous, authoritative
   representation within a system."

   - As formulated by Andy Hunt and Dave Thomas in `The Pragmatic Programmer <https://en.wikipedia.org/wiki/The_Pragmatic_Programmer>`_.

Code each action exactly once. When you need to do it multiple times, or do
it in conjunction with some other operation, call the routine or object
that knows how to do what's needed as many times as necessary. Note that
this is facilitated by the practice of `building bricks
<s-funcmeth.html#make-bricks-not-monoliths>`_ rather than monoliths.

The point is not to avoid duplicate lines of code so much as to avoid
duplicate embodiments of concepts. If two operations, X and Y, both
require sorting a list, you may have very similar looking lines for
generating each of the sorted lists. However, if they use the same sort
algorithm, both X and Y should call the same function to carry out the
sort. You shouldn't have multiple embodiments of the sort function.

This goes for data, like text strings, as well. If you're going to use a
particular string only once, ever, go ahead and hard code it. As long as it
only occurs in one place, you only have to change it in one place.

However, as soon as you have two copies of it at different places in your
code (e.g., the place where it is displayed and the test where you check
for it), you'll save yourself work in the long run by putting it in a
message catalog and using it from there.

Of course, if you hard code single use strings and put the rest in the
catalog, then when you want to use one of your single use strings a second
time, you'll have to notice that this is the second time of using this
string, add it to the catalog, and update the original use to refer to the
catalog instead. It's much easier to just put all your strings in the
catalog from the beginning. (This could be an example of a useful internal
convention.)

**Why**:

* Someday you're going to need to change how you did that
  operation or the contents of the string. Maybe some new technology
  will come along or the thing you're using will stop working. When
  the time comes, you're better off if you can change the behavior or
  text in one spot and be done.

**How**:

* Write each primitive function/method to do one thing. Higher level
  functions will call these primitives. Keep static messages in a message
  catalog and use them from there.

**Example**:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**Instead of this** (each filename is mentioned twice)::

    if os.path.exists('abcfile'):
        os.unlink('abcfile')
    if os.path.exists('foofile'):
        os.unlink('foofile')
    if os.path.exists('junk'):
        os.unlink('junk')


**Do this** (each filename is mentioned once)::

    def conditional_unlink(filename):
        if os.path.exists(filename):
            os.unlink(filename)

    conditional_unlink('abcfile')
    conditional_unlink('foofile')
    conditional_unlink('junk')


**Or even better** (the unlink function is called in only one place)::

    def conditional_unlink(filename):
        if os.path.exists(filename):
            os.unlink(filename)

    for filename in ['abcfile', 'foofile', 'junk']:
        conditional_unlink(filename)

|
|
|
