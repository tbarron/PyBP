Uncaught Exception Handler
------------------------------------------------------------

Consider providing a general exception handler at the top level of your
program

**Why**:

* Provides a "last resort" opportunity to catch errors. This gives you
  control over the format and content of the error the user sees.

**How**:

* There are a couple of ways to do this. The first is by wrapping the
  call to main(), or the contents of main() in a ``try ... except`` block.

**Example 1**:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    def main(args):
        ...

    if __name__ == "__main__":
        try:
            main(sys.argv)
        except Exception, e:
            # simple, one line error message
            print str(e)

            # full traceback for development/debugging
            raise

Another option, perhaps simpler and cleaner, is to use `sys.excepthook
<https://docs.python.org/2/library/sys.html>`_ to override Python's default
handling of uncaught exceptions:

|

**Example 2**:

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    import sys

    def main(args):
        ...
    def exc_handler():
        # simple, one line error message
        print str(e)
        # full traceback
        raise
    if __name__ == "__main__":
        sys.excepthook = exc_handler
        main(sys.argv)


Of cousre, if you *don't* provide a top level exception handler, you'll
wind up using the one Python provides by default, which is fine for many
purposes. On the other hand, most users think tracebacks are kind of ugly.

For a given project, pick an approach and stick with it. Mixing and
matching would probably be overkill and would definitely be confusing.

Of course, this allows us a lot of flexibility -- ``exc_handler()`` could send
a short one line message to the user while saving the complete traceback in
a log file for later reference, which might be a way of doing both. So you
might have your cake and eat it, too.

.. NOTE:: The point of this is NOT to put a single massive handler at the
   top of the program and attempt to handle all exceptions there. ``try ...
   except`` blocks belong at strategic spots in the code where the
   information for handling an exception is available.

|
|
|
