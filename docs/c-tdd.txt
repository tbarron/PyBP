Test Driven Development
------------------------------------------------------------

Write one or more test functions for each program function. Ideally, write
the tests before writing the program function. Use a test runner like
py.test_, nosetests_, or green_ to discover and run the test suite
regularly (like every time the code changes).

**Why**:

* A comprehensive set of unit tests allows for making changes with
  confidence. If a change breaks anything accidentally, the test suite will
  give an alarm.

**How**:

* Ideally, we would write our test functions first and use the test
  functions to specify the precise behavior expected of the new application
  functions. Then, as we write the application functions, running the tests
  will assess progress toward completing the application functions. In this
  theoretical scenario, once all the tests pass, the application is done.

* In practice, my experience has been that it's about as hard to write
  correct test code as it is to write correct application code. So I
  usually wind up developing test and application functions together.
  Working on the application functions shows me where test
  functions have been messed up and have to be corrected before the related 
  application function can be tested properly.

The documentation for each test runner describes how it discovers
tests and how it expects tests to be set up. Most of them scan project
files and directories whose names contain the string ``test`` and run class
methods with names that include the string ``test``. One reason for preferring
py.test is that it will run stand-alone functions so container classes are
not required.


Example
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**dates.py**::

    import time

    def date_arith(base, delta, dunits="sec", fmt="%Y.%m%d %H:%M:%S"):
        """
        Compute a delta from a base date and format the result. Eg:

            result = date_arith(time.time(), -3, "day")


        """
        dsec = {'sec': 1,
                'min': 60,
                'hour': 3600,
                'day': 24 * 3600,
                'week': 7 * 24 * 3600}[dunits] * delta

        t = base + dsec
        rval = time.strftime(fmt, time.localtime(t))
        return rval


**test_dates.py** (using unittest)::

    import unittest

    class TestDateRoutines(unittest.TestCase):
        def test_date_arith(self):
            self.assertEqual("2014.0101 00:00:00",
                             date_arith(1388552400, 0))
            self.assertEqual("2014.0104 00:00:00",
                             date_arith(1388552400, 3, "day"))
            self.assertEqual("2013.1231 17:00:00",
                             date_arith(1388552400, -7, "hour"))


**With py.test, the same tests can be as simple as**::

    def test_zero():
        assert "2014.0101 00:00:00" == date_arith(1388552400, 0)

    def test_day():
        assert "2014.0104 00:00:00" == date_arith(1388552400, 3, "day")

    def test_hour():
        assert "2013.1231 17:00:00" == date_arith(1388552400, -7, "hour")


**Running the tests**::

    $ cd <work-dir>
    $ py.test
    
        or
    
    $ cd <work-dir>
    $ nosetests
    
        or
    
    $ cd <work-dir>
    $ green

.. _py.test: http://pytest.org/latest/
.. _nosetests: https://nose.readthedocs.org/en/latest/
.. _green: https://pypi.python.org/pypi/green
